import{_ as s,c as a,o as n,a as e}from"./app.f673ca4d.js";const d=JSON.parse('{"title":"Jobs Overview","description":"","frontmatter":{},"headers":[{"level":2,"title":"Example","slug":"example","link":"#example","children":[]}],"relativePath":"jobs/overview.md"}'),l={name:"jobs/overview.md"},o=e(`<h1 id="jobs-overview" tabindex="-1">Jobs Overview <a class="header-anchor" href="#jobs-overview" aria-hidden="true">#</a></h1><p>Jobs are the main drivers of Neuron that execute upon a set of analytical instructions mostly based around staging, measuring and metric building. Jobs are executed using the Apache Spark <code>spark-submit</code> function. Learn more <a href="https://spark.apache.org/docs/latest/submitting-applications.html" target="_blank" rel="noreferrer">here</a>.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-hidden="true">#</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">spark-submit</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">--class</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">main-clas</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">--master</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">master-ur</span><span style="color:#A6ACCD;">l</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">--deploy-mode</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">deploy-mod</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">--conf</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">ke</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">=</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">valu</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># other options</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">application-jar&gt;</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">application-arguments</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div>`,4),p=[o];function t(r,c,i,C,D,y){return n(),a("div",null,p)}const h=s(l,[["render",t]]);export{d as __pageData,h as default};
